{
    "imports": [
        "$import glob",
        "$import os",
        "$import torch"
    ],
    "bundle_root": ".",
    "model_dir": "$@bundle_root + '/models'",
    "output_dir": "$@bundle_root + '/output'",
    "device": "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
    "autoencoder_def": {
        "_target_": "generative.networks.nets.AutoencoderKL",
        "spatial_dims": 3,
        "in_channels": 1,
        "out_channels": 1,
        "latent_channels": 3,
        "num_channels": [
            64,
            128,
            128,
            128
        ],
        "num_res_blocks": 2,
        "norm_num_groups": 32,
        "norm_eps": 1e-06,
        "attention_levels": [
            false,
            false,
            false,
            false
        ],
        "with_encoder_nonlocal_attn": false,
        "with_decoder_nonlocal_attn": false
    },
    "load_autoencoder_path": "$@model_dir + '/autoencoder.pth'",
    "load_autoencoder": "$@autoencoder_def.load_state_dict(torch.load(@load_autoencoder_path))",
    "autoencoder": "$@autoencoder_def.to(@device)",
    "diffusion_def": {
        "_target_": "generative.networks.nets.DiffusionModelUNet",
        "spatial_dims": 3,
        "in_channels": 7,
        "out_channels": 3,
        "num_channels": [
            256,
            512,
            768
        ],
        "num_res_blocks": 2,
        "attention_levels": [
            false,
            true,
            true
        ],
        "norm_num_groups": 32,
        "norm_eps": 1e-06,
        "resblock_updown": true,
        "num_head_channels": [
            0,
            512,
            768
        ],
        "with_conditioning": true,
        "transformer_num_layers": 1,
        "cross_attention_dim": 4
    },
    "load_diffusion_path": "$@model_dir + '/diffusion_model.pth'",
    "load_diffusion": "$@diffusion_def.load_state_dict(torch.load(@load_diffusion_path))",
    "diffusion": "$@diffusion_def.to(@device)",
    "scheduler": {
        "_target_": "generative.networks.schedulers.DDPMScheduler",
        "beta_start": 0.0015,
        "beta_end": 0.0205,
        "num_train_timesteps": 1000,
        "beta_schedule": "scaled_linear"
    },
    "noise": "$torch.randn((1, 3, 20, 28, 20)).to(@device)",
    "set_timesteps": "$@scheduler.set_timesteps(num_inference_steps=1000)",
    "sampler": {
        "_target_": "scripts.sampler.Sampler"
    },
    "sample": "$@sampler.sampling_fn(@noise, @autoencoder, @diffusion, @scheduler)"
}
