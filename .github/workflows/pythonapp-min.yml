## Jenkinsfile.monai-premerge
#name: premerge-min
#
#on:
#  # quick tests for pull requests and the releasing branches
#  push:
#    branches:
#      - main
#  pull_request:
#
#concurrency:
#  # automatically cancel the previously triggered workflows when there's a newer version
#  group: build-min-${{ github.event.pull_request.number || github.ref }}
#  cancel-in-progress: true
#
#jobs:
#  # caching of these jobs:
#  #   - docker-py3-pip- (shared)
#  #   - ubuntu py37 pip-
#  #   - os-latest-pip- (shared)
#  min-dep-os:  # min dependencies installed tests for different OS
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [windows-latest, macOS-latest, ubuntu-latest]
#    timeout-minutes: 40
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.8
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.8'
#    - name: Prepare pip wheel
#      run: |
#        which python
#        python -m pip install --upgrade pip wheel
#    - name: cache weekly timestamp
#      id: pip-cache
#      run: |
#        echo "datew=$(date '+%Y-%V')" >> $GITHUB_OUTPUT
#        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
#      shell: bash
#    - name: cache for pip
#      uses: actions/cache@v3
#      id: cache
#      with:
#        path: ${{ steps.pip-cache.outputs.dir }}
#        key: ${{ matrix.os }}-latest-pip-${{ steps.pip-cache.outputs.datew }}
#    - if: runner.os == 'windows'
#      name: Install torch cpu from pytorch.org (Windows only)
#      run: |
#        python -m pip install torch==1.13.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
#    - name: Install the dependencies
#      run: |
#        # min. requirements
#        python -m pip install torch==1.13.1
#        python -m pip install -r requirements-min.txt
#        python -m pip list
#        BUILD_MONAI=0 python setup.py develop  # no compile of extensions
#      shell: bash
#    - name: Run quick tests (CPU ${{ runner.os }})
#      run: |
#        python -c 'import torch; print(torch.__version__); print(torch.rand(5,3))'
#        python -c "import monai; monai.config.print_config()"
#        ./runtests.sh --min
#      shell: bash
#      env:
#        QUICKTEST: True
#
#  min-dep-py3:  # min dependencies installed tests for different python
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
#    timeout-minutes: 40
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Prepare pip wheel
#      run: |
#        which python
#        python -m pip install --user --upgrade pip setuptools wheel
#    - name: cache weekly timestamp
#      id: pip-cache
#      run: |
#        echo "datew=$(date '+%Y-%V')" >> $GITHUB_OUTPUT
#        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
#      shell: bash
#    - name: cache for pip
#      uses: actions/cache@v3
#      id: cache
#      with:
#        path: ${{ steps.pip-cache.outputs.dir }}
#        key: ubuntu-latest-latest-pip-${{ steps.pip-cache.outputs.datew }}
#    - name: Install the dependencies
#      run: |
#        # min. requirements
#        python -m pip install torch --extra-index-url https://download.pytorch.org/whl/cpu
#        python -m pip install -r requirements-min.txt
#        python -m pip list
#        BUILD_MONAI=0 python setup.py develop  # no compile of extensions
#      shell: bash
#    - name: Run quick tests (CPU ${{ runner.os }})
#      run: |
#        python -c 'import torch; print(torch.__version__); print(torch.rand(5,3))'
#        python -c "import monai; monai.config.print_config()"
#        ./runtests.sh --min
#      env:
#        QUICKTEST: True
#
#  min-dep-pytorch:  # min dependencies installed tests for different pytorch
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        pytorch-version: ['1.8.2', '1.9.1', '1.10.2', '1.11.0', '1.12.1', 'latest']
#    timeout-minutes: 40
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.8
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.8'
#    - name: Prepare pip wheel
#      run: |
#        which python
#        python -m pip install --user --upgrade pip setuptools wheel
#    - name: cache weekly timestamp
#      id: pip-cache
#      run: |
#        echo "datew=$(date '+%Y-%V')" >> $GITHUB_OUTPUT
#        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
#      shell: bash
#    - name: cache for pip
#      uses: actions/cache@v3
#      id: cache
#      with:
#        path: ${{ steps.pip-cache.outputs.dir }}
#        key: ubuntu-latest-latest-pip-${{ steps.pip-cache.outputs.datew }}
#    - name: Install the dependencies
#      run: |
#        # min. requirements
#        if [ ${{ matrix.pytorch-version }} == "latest" ]; then
#          python -m pip install torch
#        elif [ ${{ matrix.pytorch-version }} == "1.8.2" ]; then
#          python -m pip install torch==1.8.2 --extra-index-url https://download.pytorch.org/whl/lts/1.8/cpu
#        elif [ ${{ matrix.pytorch-version }} == "1.9.1" ]; then
#          python -m pip install torch==1.9.1
#        elif [ ${{ matrix.pytorch-version }} == "1.10.2" ]; then
#          python -m pip install torch==1.10.2
#        elif [ ${{ matrix.pytorch-version }} == "1.11.0" ]; then
#          python -m pip install torch==1.11.0
#        elif [ ${{ matrix.pytorch-version }} == "1.12.1" ]; then
#          python -m pip install torch==1.12.1
#        fi
#        python -m pip install -r requirements-min.txt
#        python -m pip list
#        BUILD_MONAI=0 python setup.py develop  # no compile of extensions
#      shell: bash
#    - name: Run quick tests (pytorch ${{ matrix.pytorch-version }})
#      run: |
#        python -c 'import torch; print(torch.__version__); print(torch.rand(5,3))'
#        python -c "import monai; monai.config.print_config()"
#        ./runtests.sh --min
#      env:
#        QUICKTEST: True
